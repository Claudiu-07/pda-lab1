#4

#include<iostream>
#include"mpi.h"

#define MASTER 0

int main(int argc, char *argv[]){
	
	int m,n,v[21];
	m=4;
	cin>n;
	for(int i=0;i<n;i++)
		cin>>v[i];
	if(n%2!=0)
	{
		v[n]=0;
		n++
	}
	
	MPI_Init(&argc,&argv);
	
	int var = 0;
	int numprocs, procid, len;
	int massage;
	MPI_Status status;
	
	MPI_Comm_size(MPI_COMM_WORLD, &numprocs);
	MPI_Comm_rank(MPI_COMM_WORLD, &procid);
	//MPI_Get_processor_name(hostname, &len);
	if(procid < m)
		if(procid == MASTER)
		{
			if(var == 0)
				var = v[procid * (n/m)] + v[procid * (n/m) + 1] + v[procid * (n/m) + 2];
			MPI_Recv(&message, 1, MPI_INT, procid, 1, MPI_COMM_WORLD, &status);
			var += message;
		}
		else
		{
			massage = v[procid * (n/m)] + v[procid * (n/m) + 1] + v[procid * (n/m) + 2];
			MPI_Send(&procid, 1, MPI_INT, MASTER, 1, MPI_COMM_WORLD);
		}
		
	
	MPI_Finalize();
	return 0;
}
